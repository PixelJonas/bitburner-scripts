import { NS, Server } from "@ns";
import { getAllServers } from "lib/scan";
import { calcAttackRAMUsage, calcFreeAttackRAM, getAllRankedServerList } from "lib/servers";
import { getFreeRAMBotNet } from "lib/metrics";
const DEFAULT_PCT = 0.25;

export async function main(ns: NS): Promise<void> {
  ns.disableLog("ALL");

  let botNetStats = await getFreeRAMBotNet(ns);
  while (botNetStats.used / botNetStats.total < 0.85) {
    let allServers = await getAllRankedServerList(ns, await getAllServers(ns));
    //filter all servers which are already being attacked
    allServers = allServers.filter(server => !ns.getRunningScript("exploit.js", "home", server.hostname));
    let nextBestServer = allServers.shift();
    if (nextBestServer == undefined) {
      ns.print(`FAIL: did not find any suitable server to exploit`);
    } else {
      const attackRAMUsage = await calcAttackRAMUsage(ns, nextBestServer);
      const freeAttackRam = await calcFreeAttackRAM(ns);
      const commitRatio = ((botNetStats.total - freeAttackRam) / botNetStats.total);
      ns.tprint(`Commit ratio: ${(1 - commitRatio).toFixed(2)}`);
      if (nextBestServer && commitRatio < 2) {
        ns.print(`INFO: There is ${botNetStats.freePercentage}% of RAM free in the Network. Adding ${nextBestServer.hostname} (will use ${attackRAMUsage}GB RAM)`);
        ns.exec("exploit.js", "home", 1, nextBestServer.hostname);
      }
    }

    await ns.sleep(2000);
    botNetStats = await getFreeRAMBotNet(ns);
  }
}



